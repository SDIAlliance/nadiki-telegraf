#!env python3
#
# This script acts as a processor to Telegraf and converts the metrics
# generated by the inputs ipmi_sensor, intel_powerstat and nvidia_smi
# to the format according to the NADIKI specification (see also 
# https://github.com/SDIAlliance/nadiki-api/blob/main/server/server-api.spec.yaml)
#

import fileinput
import pprint
import shlex

JOULES_PER_KWH = 3600000
SECONDS_PER_HOUR = 3600

def parse_line(line):
    # parse the input line (Influx line protocol)
    (tmp, fields_str, ts) = shlex.split(line) # shlex.split respects backslashed spaces
    pairs = tmp.split(",")
    measurement = pairs[0]
    tags = {}
    for x in pairs[1:]:
        (k,v) = x.split("=")
        tags[k] = v
    fields = {}
    for x in fields_str.split(","):
        (k,v) = x.split("=")
        fields[k] = v
    return measurement, tags, fields, ts

# CPU
current_power_consumption_watts = {}
current_dram_power_consumption_watts = {}
current_total_power_consumption_watts = None
last_ts = None

# Server
instantaneous_power_reading = {}
last_ts2 = None

# GPU
power_draw = {}
last_ts3 = None

for line in fileinput.input():
    (measurement, tags, fields, ts) = parse_line(line)

    if measurement == "powerstat_package":
        if "current_power_consumption_watts" in fields.keys():
            current_power_consumption_watts[ts] = float(fields["current_power_consumption_watts"])
        elif "current_dram_power_consumption_watts" in fields.keys():
            current_dram_power_consumption_watts[ts] = float(fields["current_dram_power_consumption_watts"])
        else:
            # do nothin with other fields of powerstat
            continue
        if ts in current_power_consumption_watts.keys() and ts in current_dram_power_consumption_watts.keys():
            result = current_power_consumption_watts[ts] + current_dram_power_consumption_watts[ts]
            if last_ts != None:
                diff = (int(ts) - int(last_ts)) / 10**9
                # fraction of an hour between the last two points
                fraction = diff / SECONDS_PER_HOUR
                # convert kWh to Joules (actually we could simplify the division by 3600 above and the
                # multiplication with 3600000 here, but this makes it clearer)
                joules = current_total_power_consumption_watts*fraction*JOULES_PER_KWH
                print(f"server,country_code={tags['country_code']},facility_id={tags['facility_id']},rack_id={tags['rack_id']},server_id={tags['server_id']} cpu_energy_consumption_joules={joules} {last_ts}")
                del(current_dram_power_consumption_watts[last_ts])
                del(current_power_consumption_watts[last_ts])
            last_ts = ts
            current_total_power_consumption_watts = result
            
    elif measurement == "ipmi_sensor" and tags["name"] == "instantaneous_power_reading":
        instantaneous_power_reading[ts] = fields["value"]
        #print(last_ts2, instantaneous_power_reading)
        if last_ts2 != None:
            diff = (int(ts) - int(last_ts2)) / 10**9
            # fraction of an hour between the last two points
            fraction = diff / SECONDS_PER_HOUR
            # convert kWh to Joules (actually we could simplify the division by 3600 above and the
            # multiplication with 3600000 here, but this makes it clearer)
            joules = float(instantaneous_power_reading[last_ts2])*fraction*JOULES_PER_KWH
            print(f"server,country_code={tags['country_code']},facility_id={tags['facility_id']},rack_id={tags['rack_id']},server_id={tags['server_id']} server_energy_consumption_joules={joules} {last_ts2}")
            del(instantaneous_power_reading[last_ts2])
        last_ts2 = ts

    elif measurement == "nvidia_smi":
        if power_draw.get(ts) == None:
            power_draw[ts] = 0
        # we have more than one GPU, so we need to sum up the power draw with the same timestamp
        power_draw[ts] += fields["power_draw"]
        #print(last_ts2, instantaneous_power_reading)
        if last_ts3 != None and last_ts3 != ts:
            diff = (int(ts) - int(last_ts3)) / 10**9
            # fraction of an hour between the last two points
            fraction = diff / SECONDS_PER_HOUR
            # convert kWh to Joules (actually we could simplify the division by 3600 above and the
            # multiplication with 3600000 here, but this makes it clearer)
            joules = float(power_draw[last_ts3])*fraction*JOULES_PER_KWH
            print(f"server,country_code={tags['country_code']},facility_id={tags['facility_id']},rack_id={tags['rack_id']},server_id={tags['server_id']} gpu_energy_consumption_joules={joules} {last_ts3}")
            del(power_draw[last_ts3])
            last_ts3 = ts



