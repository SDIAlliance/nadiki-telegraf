[global_tags]
  country_code = "${TAG_COUNTRY_CODE}"
  facility_id = "${TAG_FACILITY_ID}"
  rack_id = "${TAG_RACK_ID}"

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "30s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 1000000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Collection offset is used to shift the collection by the given amount.
  ## This can be be used to avoid many plugins querying constraint devices
  ## at the same time by manually scheduling them in time.
  # collection_offset = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified. Precision is
  ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  ##
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s:
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ##
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  precision = "0s"

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false

  ## Log format controls the way messages are logged and can be one of "text",
  ## "structured" or, on Windows, "eventlog".
  # logformat = "text"

  ## Message key for structured logs, to override the default of "msg".
  ## Ignored if `logformat` is not "structured".
  # structured_log_message_key = "message"

  ## Name of the file to be logged to or stderr if unset or empty. This
  ## setting is ignored for the "eventlog" format.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0h"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  # hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  # omit_hostname = false

  ## Method of translating SNMP objects. Can be "netsnmp" (deprecated) which
  ## translates by calling external programs snmptranslate and snmptable,
  ## or "gosmi" which translates using the built-in gosmi library.
  # snmp_translator = "netsnmp"

  ## Name of the file to load the state of plugins from and store the state to.
  ## If uncommented and not empty, this file will be used to save the state of
  ## stateful plugins on termination of Telegraf. If the file exists on start,
  ## the state in the file will be restored for the plugins.
  # statefile = ""

  ## Flag to skip running processors after aggregators
  ## By default, processors are run a second time after aggregators. Changing
  ## this setting to true will skip the second run of processors.
  # skip_processors_after_aggregators = false

[[outputs.influxdb_v2]]
   urls = ["${OUTPUT_INFLUXDB_URL}"]
   token = "${OUTPUT_INFLUXDB_TOKEN}"
   organization = "${OUTPUT_INFLUXDB_ORGANIZATION}"
   bucket = "${TAG_FACILITY_ID}" # registrar creates a bucket for each facility
   insecure_skip_verify = true

[[inputs.execd]]
  command = ["python3", "-u", "nadiki-victoriametrics-crawler.py"]
  environment = [
#    "SOCKS_PROXY=socks5h://localhost:4711"],
#    "AWS_PROFILE=leitmotiv",
    "AWS_REGION=eu-central-1",
    "VICTORIA_METRICS_URL=https://vmselect.metrics.xlab.x-ion.org",
    "TAG_SERVER_ID_MAPPING_SECRETS_ARN=arn:aws:secretsmanager:eu-central-1:591990815822:secret:nadiki-prod-ip-to-server-mapping-jiC4oM",
    "VICTORIA_METRICS_METRICS=ipmi_dcmi_power_consumption_watts,node_cpu_seconds_total{mode=\"idle\"},ipmi_fan_speed_rpm,node_network_transmit_bytes_total{device=~\"xge[0-9]\"},node_network_transmit_packets_total{device=~\"xge[0-9]\"},node_network_receive_bytes_total{device=~\"xge[0-9]\"},node_network_receive_packets_total{device=~\"xge[0-9]\"},node_disk_read_bytes_total,node_disk_written_bytes_total,node_disk_reads_completed_total,node_disk_writes_completed_total"
    #"VICTORIA_METRICS_METRICS=node_cpu_seconds_total{mode=\"idle\"}"
  ]
  data_format = "influx"
  signal = "SIGHUP"

# power consumption
[[processors.rename]]
  namepass = ["ipmi_dcmi_power_consumption_watts"]

  [[processors.rename.replace]]
  measurement = "ipmi_dcmi_power_consumption_watts"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "server_energy_consumption_watts"

# CPU

[[processors.starlark]]
  alias = "calculate cpu utilization"
  namepass = ["node_cpu_seconds_total"]
  script = "diff.star"
  [processors.starlark.constants]
    KEY_TAGS = ["instance", "cpu"]
    CALCULATE_RATIO = true
    INVERT = true

[[processors.rename]]
  namepass = ["node_cpu_seconds_total"]

  [[processors.rename.replace]]
  measurement = "node_cpu_seconds_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "cpu_busy_fraction"

# fan speed

[[processors.rename]]
  namepass = ["ipmi_fan_speed_rpm"] # prevent the field renaming to kick in for other measurements

  [[processors.rename.replace]]
  measurement = "ipmi_fan_speed_rpm"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "server_fan_speed_rpm"

# network

[[processors.starlark]]
  alias = "calculate differences between adjacent points"
  namepass = ["node_network_*"]
  script = "diff.star"
  [processors.starlark.constants]
    KEY_TAGS = ["instance", "device"]
    CALCULATE_RATIO = false
    INVERT = false

[[processors.rename]]
  namepass = ["node_network_transmit_bytes_total"]

  [[processors.rename.replace]]
  measurement = "node_network_transmit_bytes_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "network_transmit_bytes"

[[processors.rename]]
  namepass = ["node_network_transmit_packets_total"]

  [[processors.rename.replace]]
  measurement = "node_network_transmit_packets_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "network_transmit_packets"

[[processors.rename]]
  namepass = ["node_network_receive_bytes_total"]

  [[processors.rename.replace]]
  measurement = "node_network_receive_bytes_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "network_receive_bytes"

[[processors.rename]]
  namepass = ["node_network_receive_packets_total"]

  [[processors.rename.replace]]
  measurement = "node_network_receive_packets_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "network_receive_packets"

# storage io

[[processors.starlark]]
  alias = "calculate differences between adjacent points"
  namepass = ["node_disk_*"]
  script = "diff.star"
  [processors.starlark.constants]
    KEY_TAGS = ["instance", "device"]
    CALCULATE_RATIO = false
    INVERT = false

[[processors.rename]]
  namepass = ["node_disk_read_bytes_total"]

  [[processors.rename.replace]]
  measurement = "node_disk_read_bytes_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "io_bytes_read"

[[processors.rename]]
  namepass = ["node_disk_written_bytes_total"]

  [[processors.rename.replace]]
  measurement = "node_disk_written_bytes_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "io_bytes_written"

[[processors.rename]]
  namepass = ["node_disk_reads_completed_total"]

  [[processors.rename.replace]]
  measurement = "node_disk_reads_completed_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "io_reads"

[[processors.rename]]
  namepass = ["node_disk_writes_completed_total"]

  [[processors.rename.replace]]
  measurement = "node_disk_writes_completed_total"
  dest = "server"

  [[processors.rename.replace]]
  field = "value"
  dest = "io_writes"

#[[outputs.file]]
#  ## Files to write to, "stdout" is a specially handled file.
#  files = ["stdout"]
#
#  #fieldpass = ["server_fan_speed_rpm"]
#  ## Data format to output.
#  ## Each data format has its own unique set of configuration options, read
#  ## more about them here:
#  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
#  data_format = "influx"
